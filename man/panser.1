.\" Automatically generated by Pandoc 1.19.1
.\"
.TH "PANSER" "1" "April 2017" "" ""
.hy
.SH NAME
.PP
panser \- A utility for (de)serializing data formats
.SH SYNOPSIS
.PP
panser [\f[I]options\f[]] [\f[I]input\-file\f[]]...
.SH DESCRIPTION
.PP
The Panser project is a Command\-Line Interface (CLI) application for
(de)serializing data formats in a UNIX, pipe\-friendly manner.
The project is primarily written in the Rust programming language.
The idea is to have a single application for reading data in one format
on stdin and writing the same data but in a different format to stdout.
It is possible to read data from a file and write to a file, but the
application is focused on creating streams of data that can be piped
into a socket, such as a TCP stream.
The primary motivator for the application is to read JSON data and
output to the MessagePack (Msgpack) format which could be used with a
TCP stream to build a low\-level Application Programming Interface (API)
for a network\-enabled application.
The reverse is also a desired goal, reading in Msgpack data (binary,
machine\-readable) and transcoding it to JSON (text, human\-readable).
.SH OPTIONS
.TP
.B \-f \f[I]FORMAT\f[], \-\-from=\f[I]FORMAT\f[]
Specify input format.
\f[I]FORMAT\f[] can be \f[C]Bincode\f[], \f[C]CBOR\f[], \f[C]Envy\f[],
\f[C]Hjson\f[], \f[C]JSON\f[], \f[C]Msgpack\f[], \f[C]Pickle\f[],
\f[C]TOML\f[], \f[C]URL\f[], or \f[C]YAML\f[].
The \f[I]FORMAT\f[] is case insensitive.
The default is \f[C]JSON\f[].
.RS
.RE
.TP
.B \-t \f[I]FORMAT\f[], \-\-to=\f[I]FORMAT\f[]
Specify output format.
\f[I]FORMAT\f[] can be \f[C]Bincode\f[], \f[C]CBOR\f[], \f[C]Hjson\f[],
\f[C]JSON\f[], \f[C]Msgpack\f[], \f[C]Pickle\f[], \f[C]TOML\f[],
\f[C]URL\f[], or \f[C]YAML\f[].
The \f[I]FORMAT\f[] is case insensitive.
The default is \f[C]Msgpack\f[].
.RS
.RE
.TP
.B \-\-framed\-input
Indicates the first four bytes of the input is an unsigned 32\-bit
integer in Big Endian (Network ORder) indicating the total length of the
serialzied data.
.RS
.RE
.TP
.B \-\-framed\-output
Prepends the total length of the serialized data as an unsigned 32\-bit
integer in Big Endian (Network Order).
.RS
.RE
.TP
.B \-\-include\-newline
Write the newline character (0x0A) to output at the end of transcoding
the data.
.RS
.RE
.TP
.B \-o \f[I]FILE\f[], \-\-output=\f[I]FILE\f[]
Write output to \f[I]FILE\f[] instead of \f[I]stdout\f[].
If the \f[C]\-t,\-\-to\f[] option is not used, the file extension for
\f[I]FILE\f[] is used to determine the format for the output.
.RS
.RE
.SH EXAMPLES
.PP
Convert some JSON input to the Msgpack binary format.
This is the default.
.IP
.nf
\f[C]
echo\ \[aq]{"bool":true}\[aq]\ |\ panser
\f[]
.fi
.PP
Convert some JSON input from a file to the Msgpack binary format.
.IP
.nf
\f[C]
panser\ file.json
\f[]
.fi
.PP
This is equivalent to using a redirection of the file to stdin.
.IP
.nf
\f[C]
panser\ <\ file.json
\f[]
.fi
.PP
Add framing to the output.
.IP
.nf
\f[C]
echo\ \[aq]{"bool":true,"number":1.234}\ |\ panser\ \-\-framed\-output
\f[]
.fi
.PP
Remove framing from input.
.IP
.nf
\f[C]
panser\ \-f\ Msgpack\ \-\-framed\-input\ framed.msgpack
\f[]
.fi
.SH SEE ALSO
.SH AUTHORS
Christopher R. Field.
